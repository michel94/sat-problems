1. Install a Pseudo-Boolean (PB) solver (e.g. bsolo, wbo, scip, minisatp).

bsolo:       http://sat.inesc-id.pt/∼vmm/bsolo.gz      (Linux - 32 bits)
wbo:         http://sat.inesc-id.pt/∼vmm/wbo.gz        (Linux - 64 bits)
sat4jPseudo: http://www.sat4j.org/products.php         (Java)
SCIP:        http://scip.zib.de/#download              (All platforms: Windows, MacOS, Linux)
minisatp:    http://sat.inesc-id.pt/∼vmm/minisatp.gz   (Linux - 64 bits)

Use the opb format available at:
http://www.cril.univ-artois.fr/PB11/format.pdf

2. Consider the minimum vertex cover problem (lecture 06, slide 14).
   a) Encode the problem using PB constraints.
   b) Run the PB solver to get an optimal solution assignment.

3. Consider the software upgradability problem (lecture 06, page 21).
   a) Encode the problem using pseudo-Boolean constraints.
   b) Run the PB solver to get an optimal solution assignment.
   c) Consider installation costs to each package and change the PB instance accordingly.
   b) Run the PB solver to get an optimal solution assignment.

4. Consider a 4x4 sudoku puzzle where you have the following placements:
   (1, 2) -> 1
   (1, 3) -> 3
   (2, 1) -> 2
   (3, 4) -> 3
   (4, 2) -> 2
   (4, 3) -> 1

where each line is of the format (line, column) -> value

   a) Encode it using PB constraints.
   b) Run a PB solver to get a solution assignment.

5. Have more fun and develop your sudoku solver for any K x K puzzle.

